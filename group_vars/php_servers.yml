---
#
# Python role block variable definition
#
# boto* is for AWS so use in localhost only
pip_install_list        : [ "botocore" , "boto" , "boto3" ]
#pip_install_list        : [ false ]

#--- End of python role block

#
# General var definition block - to all roles
#
# Our web server definitions
#
www_basedir             : "/var/www"
www_htmldir             : "{{ www_basedir }}/html"
www_username            : "www-data"
web_service             : "nginx"

#
domain1_rootdir         : "{{ www_htmldir }}"
#

#
# Will be used mainly with SSL certificate role
#
#### Our mediawiki will be under domain1 site (Drupal)
key_base_path           : "/etc/ssl/private"
cert_base_path          : "/etc/ssl/certs"
domain1                 : "lrc.sytes.net"
cert_name_prefix        : "stg-letsencrypt"
##cert_name_prefix        : "pro-{{ domain1 }}"
production_account_key  : "pro2-letsencrypt-account-key.key"
staging_account_key     : "stg-letsencrypt-account-key.key"
#
#

# DB AWS instance used widely
#db_host : "websiteinstance.ctxnidj2utoz.us-east-2.rds.amazonaws.com"
db_host : "localhost"
db_name : "my_test"
db_user : "dbuser1"
db_pass : "dbuserpass123"
db_admuser : "root"
db_admpass : ""

# These below are used with remote ansible python script and once installed it's better not remove them
base_dep_pkg_list:
   - { pkg : "python-mysqldb"  }
   - { pkg : "python-openssl"  }

#--- End of General vars block

#
# Base role block variable definition
#
# General package and service hash list
#
# If a packet has a service associate it should be listed with srv, state and enabled.
# enabled and state defaults to true and started respectively.
dep_pkg_list		:
   - { pkg : "{{ web_service }}" ,  srv : "{{ web_service }}" , state : "started" , enabled : true }
   - { pkg : "php"             }
   - { pkg : "php-fpm"           ,  srv : "php7.2-fpm"        , state : "started" , enabled : true }
   - { pkg : "php-mysql"       }
   - { pkg : "php-gd"          }
   - { pkg : "mariadb-server"  }
#   - { pkg : "mysql-client"    }

#
# dir, file, template or link, depending on key values
#
# Will be used in template and file modules to create, delete and link.
#
# This dir_file_tmpl_list dict var will be used in 4 different tasks, one of 
# each type: tmpl, dir, link and file.
#
# If mode not present, it will default to 0644
# Note that one line may be used to multiple goals as defined in types.
# "dir" uses dest only
# "link" uses src and dest: ln -s src dest (force=yes => ln -s -f)
# "tmpl" uses name and dest: name.j2 -> dest/name
# "absent" uses dest to remove files
# srv is used to restart the service, if applicable, after a template is changed.
dir_file_tmpl_list     :
   - { types : [ "dir" , "tmpl" ] , dest : "/etc/nginx/sites-available" , name : "nginx-default" }
   - { types : [ "tmpl" ]         , dest : "/etc/nginx/sites-available" , name : "{{ domain1 }}.conf"       , srv : "{{ web_service }}" }
   - { types : [ "link" ]         , src  : "/etc/nginx/sites-available/{{ domain1 }}.conf" , dest : "/etc/nginx/sites-enabled/{{ domain1 }}.conf" }
   - { types : [ "tmpl" ]         , dest : "/etc/nginx/snippets"        , name : "{{ domain1 }}-cert.conf"  , srv : "{{ web_service }}" }
   - { types : [ "link" ]         , src  : "{{ www_htmldir }}" , dest : "{{ www_htmldir }}/Orm_test-master" }
#   - { types : [ "absent" ]       , dest : "/etc/nginx/sites-enabled/nginx-default" }
#   - { types : [ "absent" ]       , dest : "/etc/nginx/sites-enabled/default" }

#
# INI file configuration (php and others)
#
ini_file_list           :
   - { path : "/etc/php/7.2/fpm/php.ini" , section : "PHP" , option : "allow_url_fopen" , value : "Off" }
   - { path : "/etc/php/7.2/fpm/php.ini" , section : "PHP" , option : "memory_limit"    , value : "128M" }
#
# Cron
#
cron_list	:
        - false
        #   - { name: "Update domain" , minute: "*/5" , job: "~ubuntu/updatedns.sh"  , user: "ubuntu" , state: "present" }

# Define local and remote files both for upload (copy)
# and download (fetch).
# Action is mandatory (same idea of types in dir_file_tmpl_list above).
# action = list of upload or download or both
# DON'T forget local files to upload to the server and local dirs when downloading
up_down_files_list :
   -  { 
        local  : "{{ cert_hash_list[0].local_certkey_path }}",
        remote : "{{ cert_hash_list[0].server_certkey_path }}",
        action : [ "upload" ]
      }
   -  { 
        local  : "{{ cert_hash_list[0].local_cert_path }}" ,
        remote : "{{ cert_hash_list[0].server_cert_path }}",
        action : [ "upload" ]
      }

# List of tar/zip balls to unarchive to specific places.
# Must define what it creates to be idempotent.
unarchive_list  :
   - {
        src         : "https://github.com/lrgc01/Orm_test/archive/master.zip" ,
        dest        : "{{ www_htmldir }}" ,
        creates     : "{{ www_htmldir }}/README.md" ,
        owner       : "root" ,
        group       : "root" ,
        remote_src  : true
     }

#--- End of base role block

#
# Users role block variable definition
#
# users to be created.
# A later task will retrieve these keys asked to be created in here:
users_list              :
        - false
# Authorized_keys to fullfill in the server
auth_keys_file_list	:
        - false

#--- End of Users role block

#
# Gitcfg role block variable definition
#
project_list            :
        - false

#--- End of Gitcfg role block

#
# Phpcfg role block variable definition
#
# PHP composer
#
#
composer_require        : "drush/drush:9"
composer_path           : "PATH=/bin:/sbin:/usr/bin:/usr/sbin:/root/.composer/vendor/bin"
#
# Will install composer packages inside root dir  when become=true
composer_list           :
   - { command : false }
#   - { command : "require"        , global : "true"  , arguments : "--no-progress {{ composer_require }}" }
#   - { command : "create-project" , global : "false" , arguments : "--no-progress dolibarr/dolibarr {{ dolibarr_base }}" , working_dir : "{{ www_basedir }}" , creates : "{{ www_basedir }}/{{ dolibarr_base }}" }
#   - { command : "remove"         , global : "true"  , arguments : "--no-progress {{ composer_remove }}" }

#--- End of Phpcfg role block

#
# SSLcrt role block variable definition
#
# SSL certificate and private key
#
# Production directory in Let's Encrypt: "https://acme-v02.api.letsencrypt.org/directory",
# Staging directory in Let's Encrypt: "https://acme-staging-v02.api.letsencrypt.org/directory",
#
# Due to map filter inside the loop, cert_hash_list first element cannot be false like other lists
# So we define another parameter to allow the system to run safely (cert_hash_list[*].enabled)
cert_hash_list		:
   -  {
        enabled			: false ,
        account_priv_key_path	: "{{ key_base_path }}/{{ production_account_key }}",
        csr_priv_key_path	: "{{ key_base_path }}/{{ cert_name_prefix }}-csr-key.key",
        csr_cert_path		: "{{ cert_base_path }}/{{ cert_name_prefix }}.csr",
        crt_cert_path		: "{{ cert_base_path }}/{{ cert_name_prefix }}.crt",
        crt_fullchain_path	: "{{ cert_base_path }}/{{ cert_name_prefix }}-fullchain.crt",
        crt_interchain_path	: "{{ cert_base_path }}/{{ cert_name_prefix }}-intermmediate.crt",
        acme_directory		: "https://acme-v02.api.letsencrypt.org/directory",
        C			: "CA",
        ST			: "Quebec",
        L			: "Montreal",
        O			: "Lrgc01 private site",
        OU			: "Lrgc01 private site",
        email_address		: "luizrogeriocarvalho@gmail.com",
        CN			: "{{ domain1 }}",
        force_cert_y_n		: "no",
        allow_creation_y_n	: "yes",
        remaining_days		: "30",
        server_certkey_path	: "{{ key_base_path }}/{{ domain1 }}.key",
        server_cert_path	: "{{ cert_base_path }}/{{ domain1 }}.crt",
        local_certkey_path	: "{{ confdir }}/{{ domain1 }}.key",
        local_cert_path		: "{{ confdir }}/{{ domain1 }}.crt",
        web_rootdir		: "{{ domain1_rootdir }}"
      }
server_cert_n_key_list	:
   -  { 
        src  : "{{ cert_hash_list[0].csr_priv_key_path }}",
        dest : "{{ cert_hash_list[0].server_certkey_path }}"
      }
   -  { 
        src  : "{{ cert_hash_list[0].crt_cert_path }}",
        dest : "{{ cert_hash_list[0].server_cert_path }}"
      }
# srv defines if a service will be restarted upon modification in file upload
ssl_up_down_files_list 	:
   -  { 
        local  : "{{ cert_hash_list[0].local_certkey_path }}",
        remote : "{{ cert_hash_list[0].server_certkey_path }}",
        action : [ "upload" , "download" ],
        srv    : "{{ web_service }}"
      }
   -  { 
        local  : "{{ cert_hash_list[0].local_cert_path }}" ,
        remote : "{{ cert_hash_list[0].server_cert_path }}",
        action : [ "upload" , "download" ],
        srv    : "{{ web_service }}"
      }

#--- End of SSLCrt role block

#
# DB_adm role block variable definition
#
# Care should be taken here because mysql_user ansible module 
# does not support grants on FUNCTIONS and PROCEDURES. 
# The workaround is to let append_privs=true so that 
# such kind of priviledge added stay around.
#
# It seems that aws eds instance has some issue with 
# mysql_user module, because it always shows no idempotency.
#
# 'db_list[*].dbcreate' switches one entry on/off
# drop is used un role/uninst to remove a database
db_list              :
   -  {
        dbcreate     : true ,
        drop         : false ,
        admuser      : "{{ db_admuser }}", 
        admpass      : "" ,
        host         : "{{ db_host }}",
        user         : "{{ db_user }}" ,
        pass         : "{{ db_pass }}" ,
        dbname       : "{{ db_name }}" ,
        encoding     : "utf8mb4" ,
        collation    : "utf8mb4_general_ci" ,
        perms        : "{{ db_name }}.*:ALL",
        append_privs : true 
      }

#--- End of DB_adm role block


# 
# Backup and Restore roles block variables definition
#
sql_bkp_cmd         : "mysqldump -u {{ db_admuser }} -h {{ db_host }} -p{{ db_admpass }} --opt "
sql_rest_cmd        : "mysql -u {{ db_admuser }} -h {{ db_host }} -p{{ db_admpass }} "
#sql_bkp_cmd         : "mysqldump --opt "
#sql_rest_cmd        : "mysql"
remote_bkpdir       : "~ubuntu"
mediawiki_DB_bkp    : "mediawiki_{{ bkptag }}.sql.gz"
mediawiki_docs_bkp  : "mediawiki_{{ bkptag }}.documents.tgz"
mediawiki_DB_rest   : "wiki_DB_first_install.sql.gz"
mediawiki_docs_rest : "mediawiki_first_install.documents.tgz"
local_bkp_dir       : "{{ confdir }}/bkprest"
bkp_rest_files_list :
   -  { 
         local   : "{{ local_bkp_dir }}/{{ mediawiki_DB_bkp }}",
         remote  : "{{ remote_bkpdir }}/{{ mediawiki_DB_bkp }}" ,
         action  : [ "download" ]
      }
   -  { 
         local   : "{{ local_bkp_dir }}/{{ mediawiki_docs_bkp }}",
         remote  : "{{ remote_bkpdir }}/{{ mediawiki_docs_bkp }}" ,
         action  : [ "download" ]
      }
   -  { 
         local   : "{{ local_bkp_dir }}/{{ mediawiki_DB_rest }}",
         remote  : "{{ remote_bkpdir }}/{{ mediawiki_DB_rest }}" ,
         action  : [ "upload" ]
      }
shell_bkpcmd_list   :
   -  {
         enabled  : false ,
         shellcmd : "{{ sql_bkp_cmd }} {{ db_name }} | gzip -c > {{ mediawiki_DB_bkp }}" ,
         chdir    : "{{ remote_bkpdir }}" ,
         creates  : "{{ mediawiki_DB_bkp }}"
      }
   -  {
         enabled  : false ,
         shellcmd : "tar -czf {{ mediawiki_docs_bkp }} {{ www_basedir }}/{{ mediawiki_ver }}/LocalSettings.php" ,
         chdir    : "{{ remote_bkpdir }}" ,
         creates  : "{{ mediawiki_docs_bkp }}"
      }
# used for mysql
shell_restorecmd_list   :
   -  {
         enabled  : true ,
         shellcmd : "gunzip -c {{ mediawiki_DB_rest }} | {{ sql_rest_cmd }} {{ db_name }} ; touch mediawiki.sql.restored" ,
         chdir    : "{{ remote_bkpdir }}" ,
         creates  : "mediawiki.sql.restored"
      }
# restore with tar goes here
unarchive_bkps    :
   -  {
         enabled    : false ,
         src        : "{{ remote_bkpdir }}/{{ mediawiki_docs_rest }}" ,
         dest       : "/" ,
         remote_src : "yes",
         creates    : "{{ mediawiki_rootdir }}/LocalSettings.php"
      }

#--- End Backup and Restore block

