# It is not possible to undefine a variable. If it is defined in 
# somewhere else like one of the other precedence places for 
# variables, just set its value to false or its first element 
# to false if it is supposed to be a list. All of our "when" 
# condition tests use false/true instead of "is defined" 
# condition.
#
# some_var : false
# some_list_var : [ false ]
# some_hash_list_var :
#   - false
#   - { key : value }
# 
# In our roles it has the same efect as if it were undefined.

We use vars_files dir to put some vars_files referenced inside each .yml playbook.

Precedence in vars:

        command line values (eg “-u user”)
        role defaults [1]
        inventory file or script group vars [2]
        inventory group_vars/all [3]
        playbook group_vars/all [3]
        inventory group_vars/* [3]
        playbook group_vars/* [3]
        inventory file or script host vars [2]
        inventory host_vars/* [3]
        playbook host_vars/* [3]
        host facts / cached set_facts [4]
        play vars
        play vars_prompt
        play vars_files
        role vars (defined in role/vars/main.yml)
        block vars (only for tasks in block)
        task vars (only for the task)
        include_vars
        set_facts / registered vars
        role (and include_role) params
        include params
        extra vars (always win precedence)


[1]	Tasks in each role will see their own role’s defaults. Tasks defined outside of a role will see the last role’s defaults.
[2]	(1, 2) Variables defined in inventory file or provided by dynamic inventory.
[3]	(1, 2, 3, 4, 5, 6) Includes vars added by ‘vars plugins’ as well as host_vars and group_vars which are added by the default vars plugin shipped with Ansible.
[4]	When created with set_facts’s cacheable option, variables will have the high precedence in the play, but will be the same as a host facts precedence when they come from the cache.
