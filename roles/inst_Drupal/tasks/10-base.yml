---
#- name: Apt repositories for certbot ----------------------
#  apt_repository:
#    repo: ppa:certbot/certbot
#  register: certbot_repo_added
#  tags: update_repository
#
- name: Update cache and upgrade --------------------------
  apt: 
    update_cache: "{{ update_cache_y_n }}"
    upgrade: "{{ update_cache_y_n }}"
  register: updated_cache
  when: update_cache_y_n == "true"
  tags: update_repository

- name: Install dependency packages -----------------------
  apt: 
    pkg: "{{ item.pkg }}" 
    state: "present"
  loop: "{{ dep_pkg_list }}"
  register: drupal_dep_pkg_installed
  tags: install_dep_pkg, drupal_site

- name: Ensure directories all_descriptor_list.types=dir --
  file: 
    path: "{{ item.dest }}" 
    state: "directory"
  when: '"dir" in item.types'
  loop: "{{ all_descriptor_list }}"
  register: directories_in_place
  tags: drupal_site, config_files, deploy_templates

- name: Set composer packs if required (PHP) --------------
  composer:
    command: require
    arguments: "{{ composer_required }}"
    global_command: yes
  register: composer_done
  tags: drupal_site

- name: Create some users for site / app ------------------
  user:
    name: "{{ item.name }}"
    comment: "{{ item.comment }}"
    generate_ssh_key: "{{ item.sshkey }}"
    groups: "{{ item.groups }}"
    append: true
  loop: "{{ users_list }}"
  register: users_created
  tags: drupal_site, git_config

- name: Retrieve priv key from list of users --------------
  fetch: 
    dest: "{{ confdir }}/git_priv_key"
    src: "~git/.ssh/id_rsa"
    flat: true
  when: users_created is success 
  tags: git_config

- name: Fill in authorized_keys to each user of a list -----
  authorized_key:
    user: "{{ git_user }}"
    state: present
    key: "{{ lookup('file', item ) }}"
  loop: "{{ pub_keys_file_list }}"
  when: users_created is success
  tags: git_config

- name: Grant repodir permissions to git user -------------
  file:
    path: "{{ git_repodir }}"
    state: directory
    owner: "{{ git_user }}"
    group: "{{ git_user }}"
    mode: "g+rwx"
    recurse: false
  when: users_created is success
  register: git_perms_in_repodir
  tags: git_config

- name: Create some git projects on server ----------------
  shell: "su - {{ git_user }} -c \"/usr/bin/git init --bare {{ git_repodir }}/{{ item }}\""
  args:
    creates: "{{ item }}"
    chdir: "{{ git_repodir }}"
    warn: false
  loop: "{{ project_list }}"
  when: git_perms_in_repodir is success
  register: git_repos_created
  tags: git_config
