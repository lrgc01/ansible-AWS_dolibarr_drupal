---
########################################################
# Security groups and key pairs - almost aways mandatory
- name: Create security groups ------------
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: "present"
    region: "{{ region }}"
    name: "{{ item.name }}"
    description: "{{ item.description | default('') }}"
    vpc_id: "{{ item.vpc_id | default(vpc_facts.vpcs[0].vpc_id) }}"
    rules: "{{ item.rules }}"
  loop: "{{ security_group_list }}"
  register: created_sg
  when: vpc_facts is success
  tags: create_security_groups, change_state_all_ec2_instances, change_state_all_instances, create_ec2_instances, create_rds_instances, create_aws_instances

- name: Create EC2 key pairs --------------
  ec2_key:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    name: "{{ item.name }}"
  loop: "{{ key_pair_list }}"
  notify: Copy EC2 Private Key
  register: keypair_registered
  tags: create_key_pairs, create_rds_instances, create_ec2_instances, create_aws_instances

#############################
# EC2 instances
- name: Create EC2 instances --------------
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: "present"
    wait: "yes"
    region: "{{ region }}"
    instance_tags: "{{ item.tags | default(omit) }}"
    image: "{{ item.image }}"
    group: "{{ item.SG_name }}"
    instance_type: "{{ item.type }}"
    key_name: "{{ item.key_name }}"
    vpc_subnet_id: "{{ item.subnet_id | default(pick_subnet[0]) }}"
    assign_public_ip: "{{ item.pub_ip | default(\"yes\") }}"
    id: "{{ region + '_' + item.tags.Name + '_' + item.type + '_' + item.image }}"
  loop: "{{ ec2_instances_by_tag }}"
  when: ec2_instances_by_tag is defined and item.state == "present"
  vars:
    pick_subnet: "{{ default_subnets.subnets|map(attribute='id') | list | shuffle(seed=ansible_hostname) }}"
  register: create_ec2_instances
  tags: create_ec2_instances, create_aws_instances

#############################
# RDS instances
- name: Create RDS instances --------------
  rds:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    command: create
    region: "{{ region }}"
    publicly_accessible: "false"
    instance_type: "{{ item.type }}"
    instance_name: "{{ item.name }}"
    db_engine: "{{ item.engine }}"
    size: "{{ item.size }}"
    vpc_security_groups: "{{ created_sg | json_query(sg_id) }}"
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    tags: "{{ item.tags }}"
  loop: "{{ rds_instances_by_name }}"
  vars:
    sg_id: "results[?group_name=='{{ item.sg_name }}'].group_id"
  register: created_db_instance
  when: rds_instances_by_name[0] and created_sg is success
  tags: create_rds_instances, create_aws_instances

#######
# debug
#- name: Show sec groups
#  debug:
#    var: created_sg | json_query(sg_id)
#  #loop: "{{ created_sg | json_query('results[?group_name==`rdp`].group_id') }}"
#  #loop: "{{ created_sg | json_query(query_by_name) }}"
#  #loop: "{{ keypair_registered | json_query('results[*].key') }}"
#  #loop: "{{ keypair_registered | json_query(query_by_name) }}"
#  loop: "{{ keypair_registered.results }}"
#  when: item.key.private_key is defined
#  vars:
#    sg_id: "results[?group_name=='{{ rds_instances_by_name[0].sg_name }}'].group_id"
#    #query_by_name: "results[?group_name=='{{ win_sg_name }}'].group_id"
#    #query_by_name: "results[?key.name=='test-key'].key"
#    #query_by_name: "results[*].key.{name: name, fingerprint: fingerprint, private_key: private_key}"
#    #query_by_name: "results[?key.private_key!=''].key"
#  tags: show_debug
